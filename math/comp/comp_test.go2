package comp

import "testing"

contract Comparable(T) {
	T int, int8, int16, int32, int64,
	uint, uint8, uint16, uint32, uint64, uintptr,
	float32, float64,
	string
}

func Max(type T Comparable)(v0 T, vn ...T) T {
	switch l := len(vn); {
	case l == 0:
		return v0
	case l == 1:
		if v0 > vn[0] { return v0 }
		return vn[0]
	default:
		vv := Max(vn[0], vn[1:]...)
		if v0 > vv { return v0 }
		return vv
	}
}

// By Ian Taylor
func Max2(type T Comparable)(s ...T) T {
	if len(s) == 0 {
		panic("Min of no elements")
	}
	r := s[0]
	for _, v := range s[1:] {
		if v > r {
			r = v
		}
	}
	return r
}

func MaxTwo(type T Comparable)(v0, v1, v2 T) T {
	if v0 > v1 {
		if v0 > v2 {
			return v0
		} else {
			return v2
		}
	} else {
		if v1 > v2 {
			return v1
		} else {
			return v2
		}
	}
}

func TestMax(t *testing.T) {
	got := Max(1, 2, 3)
	if got != 3 {
		t.Fatalf("want 3")
	}
	got = Max(1, 3, 2)
	if got != 3 {
		t.Fatalf("want 3")
	}
	got = Max(2, 1, 3)
	if got != 3 {
		t.Fatalf("want 3")
	}
	got = Max(2, 3, 1)
	if got != 3 {
		t.Fatalf("want 3")
	}
	got = Max(3, 1, 2)
	if got != 3 {
		t.Fatalf("want 3")
	}
	got = Max(3, 2, 1)
	if got != 3 {
		t.Fatalf("want 3")
	}
}
