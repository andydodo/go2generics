package main

import (
	"fmt"
)

// 将一组值，映射到另一组值
func Map(m func(v int) int, s []int) []int {
	ret := make([]int, len(s))
	for i, v := range s {
		ret[i] = m(v)
	}
	return ret
}

func GenMap(type T1, T2)(m func(v T1) T2, s []T1) []T2 {
	ret := make([]T2, len(s))
	for i, v := range s {
		ret[i] = m(v)
	}
	return ret
}

// Reduce 定义一组值的映射关系 (x, y) -> z，映射到一个单一值
func Reduce(type T)(m func(x, y T) T, s []T) (ret T) {
	// NOTE: unimplemented Stmt *ast.SwitchStmt
	l := len(s)
	if l == 0 {
		return
	}
	if l== 1 {
		return s[0]
	}
	if l == 2 {
		return m(s[0], s[1])
	}
	init := s[0]
	for _, v := range s[1:] {
		init = m(init, v)
	}
	return init
}

func useMap() {
	s := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
	r := GenMap(func(x int) float64 {
		return float64(x)*2.0
	}, s)
	fmt.Printf("ret: %v", r)
}
func useReduce() {
	s := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
	r := Reduce(func(a, b int) string {
		return a+b
	}, s)
	fmt.Printf("ret: %v", r)
}

func main() {
	useMap()
}
